---
const navLinks = [
  { href: "./", label: "Home" },
  { href: "#code-projects", label: "Code Projects" },
  { href: "#wordpress-projects", label: "WordPress Projects" }
];

import ThemeToggle from "./ThemeToggle.astro";

// Añadir el estado inicial del idioma
const currentPath = Astro.url.pathname;
const isEnglish = currentPath.includes('/en');
---

<nav
  class="bg-white dark:bg-gray-800 px-4 sm:px-8 md:px-16 py-3 sm:py-4 md:py-5 fixed top-0 w-full z-10 shadow-md transition-colors duration-300"
>
  <div class="container flex justify-between items-center mx-auto">
    <!-- Menú de Navegación -->
    <div class="flex items-center">
      <button
        id="menu-btn"
        class="text-gray-800 dark:text-white focus:outline-none sm:hidden mr-4"
      >
        <div class="space-y-1">
          <span class="block h-0.5 w-6 bg-gray-800 dark:bg-white"></span>
          <span class="block h-0.5 w-6 bg-gray-800 dark:bg-white"></span>
          <span class="block h-0.5 w-6 bg-gray-800 dark:bg-white"></span>
        </div>
      </button>
    </div>

    <ul
      id="menu"
      class="hidden sm:flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-5 items-center"
    >
      {
        navLinks.map((link) => (
          <li>
            <a href={link.href} class="text-gray-800 dark:text-white hover:text-gray-600 dark:hover:text-gray-400">
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>

    <!-- Redes Sociales y Theme Toggle -->
    <div class="flex space-x-3 sm:space-x-5 items-center">
      <a href="https://github.com/DavidUmiri">
        <img
          src="/portfolio-dauc/images/github.webp"
          alt="GitHub David Umiri"
          class="w-5 h-5 sm:w-6 sm:h-6"
        />
      </a>
      <a href="https://linkedin.com/in/davidumiri">
        <img
          src="/portfolio-dauc/images/linkedin.webp"
          alt="LinkedIn David Umiri"
          class="w-5 h-5 sm:w-6 sm:h-6"
        />
      </a>
      <div class="inline-block">
        <ThemeToggle />
      </div>
      <!-- Language Selector movido al final -->
      <div class="relative group">
        <button id="langButton" class="flex items-center space-x-1">
          <img
            src={`/portfolio-dauc/images/${isEnglish ? 'en' : 'es'}.png`}
            alt={isEnglish ? 'English' : 'Español'}
            class="w-5 h-5 sm:w-6 sm:h-6"
          />
        </button>
        <div class="absolute right-0 mt-2 py-2 w-24 bg-white dark:bg-gray-800 rounded-md shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
          <a href="/es" class="flex items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
            <img src="/portfolio-dauc/images/es.png" alt="Español" class="w-5 h-5 mr-2" />
            <span class="text-sm text-gray-800 dark:text-white">ES</span>
          </a>
          <a href="/en" class="flex items-center px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700">
            <img src="/portfolio-dauc/images/en.png" alt="English" class="w-5 h-5 mr-2" />
            <span class="text-sm text-gray-800 dark:text-white">EN</span>
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Menú desplegable para móviles -->
  <div
    id="mobile-menu"
    class="fixed top-0 left-0 w-2/3 h-full bg-white dark:bg-gray-800 z-20 transition-all transform -translate-x-full sm:hidden duration-300 ease-in-out opacity-0 shadow-lg"
  >
    <div class="flex justify-between items-center p-4">
      <div class="text-gray-800 dark:text-white text-xl">Menu</div>
      <button id="close-btn" class="text-gray-800 dark:text-white focus:outline-none">
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <ul
      class="flex flex-col space-y-2 p-4 transition-all duration-300 ease-in-out opacity-0 translate-x-[-20px]"
    >
      {
        navLinks.map((link) => (
          <li>
            <a
              href={link.href}
              class="text-gray-800 dark:text-white hover:text-gray-600 dark:hover:text-gray-400 block px-4 py-2 menu-item"
            >
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuBtn = document.getElementById("menu-btn");
    const closeBtn = document.getElementById("close-btn");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuItems = document.querySelectorAll(".menu-item");
    const languageLinks = document.querySelectorAll('[href="/en"], [href="/es"]');

    // Verificar que los elementos existan
    if (!menuBtn || !closeBtn || !mobileMenu) return;

    function closeMenu() {
      if (!mobileMenu) return;
      mobileMenu.classList.add("-translate-x-full", "opacity-0");
      mobileMenu.classList.remove("translate-x-0", "opacity-100");
      const menuList = mobileMenu.querySelector("ul");
      if (!menuList) return;
      menuList.classList.add("opacity-0", "translate-x-[-20px]");
      menuList.classList.remove("opacity-100", "translate-x-0");
    }

    function openMenu() {
      if (!mobileMenu) return;
      mobileMenu.classList.remove("-translate-x-full", "opacity-0");
      mobileMenu.classList.add("translate-x-0", "opacity-100");
      const menuList = mobileMenu.querySelector("ul");
      if (!menuList) return;
      setTimeout(() => {
        menuList.classList.remove("opacity-0", "translate-x-[-20px]");
        menuList.classList.add("opacity-100", "translate-x-0");
      }, 150);
    }

    menuBtn.addEventListener("click", () => {
      if (!mobileMenu) return;
      if (mobileMenu.classList.contains("-translate-x-full")) {
        openMenu();
      } else {
        closeMenu();
      }
    });

    closeBtn.addEventListener("click", closeMenu);

    window.addEventListener("click", (e) => {
      if (!mobileMenu || !menuBtn || !(e.target instanceof Node)) return;
      if (!mobileMenu.contains(e.target) && !menuBtn.contains(e.target)) {
        closeMenu();
      }
    });

    menuItems.forEach((item) => {
      item.addEventListener("click", (e) => {
        e.preventDefault();
        const href = item instanceof HTMLAnchorElement ? item.getAttribute("href") : null;
        if (!href) return;

        if (href.startsWith("#")) {
          const element = document.querySelector(href);
          if (element) {
            element.scrollIntoView({ behavior: "smooth" });
          }
        } else {
          window.location.href = href;
        }

        setTimeout(closeMenu, 200);
      });
    });

    languageLinks.forEach(link => {
      if (!(link instanceof HTMLAnchorElement)) return;
      
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");
        if (!href) return;
        
        const newLang = href.replace("/", "");
        const currentPath = window.location.pathname;
        
        let newPath = currentPath;
        if (currentPath.includes("/en") || currentPath.includes("/es")) {
          newPath = currentPath.replace(/(\/en|\/es)/, `/${newLang}`);
        } else {
          newPath = `/${newLang}${currentPath}`;
        }
        
        window.location.href = newPath;
      });
    });

    document.querySelectorAll("nav a").forEach((link) => {
      if (!(link instanceof HTMLAnchorElement)) return;
      const href = link.getAttribute("href");
      if (href?.startsWith("#")) {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const element = document.querySelector(href);
          if (element) {
            element.scrollIntoView({ behavior: "smooth" });
          }
        });
      }
    });
  });
</script>
  });
</script>
